オープンAI（OpenAI）の共同創業者であるアンドレイ・カルパシーが2月にXで自身の新しい趣味について興奮気味に投稿し始めたとき、彼が世界的に広がりつつあるムーブメント全体を象徴する言葉を生み出そうとしていたとは、本人ですら想像していなかっただろう。

「私が『バイブコーディング（Vibe coding）』と呼んでいる新しいタイプのコーディングがあります。ここでは、バイブス（感覚）に完全に身を委ね、指数関数的な進化を受け入れ、コードの存在そのものを忘れてしまいます」とカルパシーは述べた。「今、私はあるプロジェクト、つまりWebアプリを構築しているのですが、それはもはや本当の意味でのコーディングではありません。見る、話す、実行する、コピーする——。それだけで、たいていはうまくいくのです」。

もしこれらが、何行ものコードを丹念に読み解く作業とはまったく異なるように聞こえるとしたら、それは当然である。カルパシーが語っているのは、AIアシスタントを活用した特定のスタイルのコーディングだからだ。彼の言葉は、ソフトウェア開発者だけでなく、熱心なアマチュアの間にも共鳴を呼び起こした。それ以来、彼の投稿を契機に、インターネット上では解説記事が数多く生まれ、熱のこもった議論が巻き起こっている。「バイブコーディング」とは一体何なのか？ それは誰に恩恵をもたらし、今後どうなっていくのだろうか？

バイブコーディングの定義とは？
バイブコーディングを正しく理解するうえで重要なのは、この言葉自体は新しいかもしれないが、その背後にある技術は決して新しいものではないという点である。過去数年間、アンソロピック（Anthropic）のClaude（クロード）、オープンAIのChatGPT（チャットGPT）、グーグル・ディープマインドのGemini（ジェミニ）といった汎用チャットボットは、ゲームやWebサイト、アプリといったソフトウェアを構築するためのコーディング能力を着実に高めてきた。しかし、バイブコーディングというスタイルを本格的に押し広げたのは、カーソル（Cursor）のChat（チャット、旧Composer＝コンポーザー）やGitHub Copilot（ギットハブ・コパイロット）など、専用に設計されたAIコーディング・アシスタントの登場である。これらのツールは、ユーザーの意図をリアルタイムで予測し、直感的な提案を提供することで、たとえコードを書いた経験がなくても、ソフトウェア開発をこれまでになく容易なものにしている。

「ここ3〜4年の間に、これらのAIによるオートコンプリートツールは大きく進化しました。最初は1行のコードを補完する程度でしたが、今ではファイル全体を書き換えたり、新たなコンポーネントを生成することさえできます」。インターフェイス企業「サンドバー（Sandbar）」のソフトウェア・デザイナーであるバロン・ウェブスターは語る。「ユーザーが手を離して機械に任せられる作業領域は、時間とともにどんどん拡大しています」。

バイブコーディングに該当しないのは？
とはいえ、AIを活用したすべてのコーディングがバイブコーディングというわけではない。本当の意味でバイブコーディングをするには、AIに完全に主導権を委ね、生成されるコードを逐一チェックしたり直接修正したりせずに、流れに身を任せる覚悟が必要である。カルパシーは長文の投稿の中で、バイブコーディングの際には、カーソルのツールが提示するすべての提案を気軽に受け入れ、そのツールが自らの誤りを修正できると信頼していると語っている。「エラーメッセージが出たら、それをそのままコメントも付けずにコピペするだけで、たいていは修正されます」とカルパシーは述べている。「ときにはLLMがバグ修正に失敗することもありますが、その場合はそのバグを避けるか、手当たり次第に変更を頼んでバグが消えるのを待ちます」。

バイブコーディングとは本質的に、コードベースとプロンプトを通じて対話することである。つまりエンジニアの役割は、ツールとの会話とその結果の確認に集約される——。こう説明するのは、デザイン・プラットフォーム企業「キャンバ（Canva）」のソフトウェア・エンジニアであるセルゲイ・ツェロヴァルニコフだ。彼は日常的にAI支援ツールを利用している。「アンドレイはちょっとしたインフルエンサーで、この用語を非常に意図的に定義しました」とツェロヴァルニコフは語る。「彼はある意味冗談のつもりで投稿したのですが、それが業界で実際に起こっていることをうまく言い表していたため、一気に広まったのです」。

バイブコーディングは私に適している？
MITメディアラボのAIセキュリティ研究者であるトビン・サウス博士によると、バイブコーディングから最も恩恵を受ける可能性が高いのは、2つのタイプの人々だという。1つ目はカルパシーのように、すでにコーディングに習熟しており、バイブコーディングを用いて重要なプロジェクトを構築する中で深刻な問題が発生しても、エラーの修正方法を熟知している人たち。もう1つは、コーディングの経験がほとんど、あるいはまったくない完全な初心者たちである。「バイブコーディングとは、自分では実装できないが、AIには実装できるようなビジョンを持つことだと、私は定義しています」（サウス博士）。

バイブコーディングの最大の魅力は、その手軽さとアクセスのしやすさにある。AI支援ツールを使えば、人間が一から手作業でコードを書くよりもはるかに短時間で、プロトタイプのWebサイトやゲーム、Webアプリといった小規模なプロジェクトを作成できる。しかし、こうした「任せっぱなし」の手法は、リスクの低いシンプルなデジタル製品を構築する場合には理にかなっていても、重要性が高く複雑なシステムではリスクが格段に高くなる。AIコーディング・ツールは大規模言語モデル（LLM）に基づいて動作しており、生成されるコードには、LLMベースのチャットボットが出力する回答と同様に、エラーが含まれる可能性が高い。キャンバのツェロヴァルニコフは、「構築しようとしているものが、大規模な情報データベースやその保護を目的としたセキュリティ対策、多数のユーザー、あるいはユーザー入力データへのアクセスを伴う場合には、これは大きな問題となります」と指摘する。

「バイブコーディングでは多くのエラーや問題が生じる可能性がありますが、ちょっとしたゲームやデータを保存しない小規模アプリのような環境では、それほど大きな問題にはなりません。私自身は、大規模なプロジェクトであればあるほど、はるかに慎重になると思います。セキュリティ上の脆弱性があるかどうかわからず、自分でコードをテストしていないとしたら、それは非常に危険なことです」。

これは特に、コーディングの専門家ではない人々に当てはまる。バイブコーディングを推進するXのユーザーであるレオは、先月、カーソルのツールだけを使ってSaaSアプリケーション（ネット経由で利用するソフトウェア）を構築したことを投稿した際に、それを身をもって知ることになった。この投稿はすぐに悪意あるWebユーザーたちの目に留まり、彼らはすぐさまレオのサービスのセキュリティ・ホールを突き始めた。「みんな、僕は攻撃を受けてる」と、レオは2日後に投稿した。「僕は技術者じゃないので、問題の原因を突き止めるのに人より時間がかかっています。当面は、Xで自分の取り組みを公開するのはやめます。世の中には本当に変な人たちがいる」。

結局のところ、バイブコーディングはWebサイトやゲームといった漠然としたアイデアを現実にする手助けにはなるが、それだけで信頼性や安全性を備えたシステムを構築することはできない。もっとも、データベースの作成から認証機能の追加まで、信頼性や安全性を補強するための既存ツールはすでに数多く存在する。サウス博士は、「バイブコーディングだけで実用的で価値ある、安全かつ堅牢なアプリを作ることはできないが、使い方に注意さえすれば、出発点としては有用です」と述べている。

サウス博士は、AI支援によるコーディング・アシスタントの能力は今後も向上を続け、Webホスティング企業も自社ツールをさらに使いやすくするためにAIの統合を進めていくだろうと予測している。つまり、ソフトウェア開発の障壁は今後ますます低くなっていくということだ。「ソフトウェア開発のコストは、指数関数的なレベルで劇的に低下するでしょう」とサウス博士は語る。「世界はこの新たな現実に適応せざるを得なくなります。この流れは止まらないのです」。